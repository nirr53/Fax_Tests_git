package EMS_Tests;

import java.io.File;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;

/**
* ----------------
* This test tests the export-results feature.
* ----------------
* Tests:
* 	 - Enter Manage multiple users changes menu.
* 	 -  Create several users using POST query.
* 	 -  Delete the users.
* 	 1. Export the results to file. 
* 
* Results:
*	 1.   Export results should be ended successfully.
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test74__multiple_users_export_results {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private String        usedBrowser = "";
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test74__multiple_users_export_results(String browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass
  public static void setting_SystemProperties() {
	  
	  System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Manage_multiple_users_export_results() throws Exception {
	 
	String srcUserPrefix 	 = "sMsgRstrtUser";
	String usersNumber   	 = "3";
    String exportFilesPrefix = "exportData.csv";
	int usStartIdx 		 	 = 1;
	int usersNumberInt       = Integer.parseInt(usersNumber);
	String successPath       = System.getProperty("user.dir") + "\\" + "success.txt";
	File file                = new File(successPath);
    Map<String, String> map  = new HashMap<String, String>();
	Log.startTestCase(this.getClass().getName());

    // Step 1 - Create several users using POST query
	testFuncs.myDebugPrinting("Step 1 - Create several users using POST query");
	file.delete();
	testFuncs.login(driver, testVars.getSysUsername(), testVars.getSysPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
	String Id = testFuncs.getId();
	String srcUserName = srcUserPrefix + Id;
	String path = System.getProperty("user.dir") + "\\" + testVars.getCrUserBatName();	
    String[] cmd = {path, testVars.getIp(), testVars.getPort()  , usersNumber,
    				srcUserName , testVars.getDomain(), "registered",
    		        "430HD", "TelAviv", "myLocation" };
    Process p = Runtime.getRuntime().exec(cmd);
    p.waitFor();
    testFuncs.waitForPostUsersCreate(successPath, usersNumberInt * 60);
    map.put("usersPrefix",  srcUserName + "_");
    map.put("usersNumber",  usersNumber); 
    map.put("startIdx"   ,  String.valueOf(usStartIdx));
    map.put("srcUsername",  srcUserName + "_");
	      
    // Step 2 - Delete the created users
  	testFuncs.myDebugPrinting("Step 2 - Delete the created users");
    driver.switchTo().defaultContent();
	testFuncs.enterMenu(driver, "Manage_Multiple_Users", "Manage Multiple Users");
  	testFuncs.myWait(1000);
    driver.switchTo().frame(1);	
    testFuncs.selectMultipleUsers(driver, srcUserName, usersNumber);
    map.put("action"	 ,  "Delete Users");
    map.put("srcUsername",  "Finished");
    testFuncs.setMultipleUsersAction(driver, map);
    
    // Step 3 - Export results
  	testFuncs.myDebugPrinting("Step 3 - Export results");
	testFuncs.deleteFilesByPrefix(testVars.getDownloadsPath(), exportFilesPrefix);
	testFuncs.myWait(2000);
    driver.findElement(By.xpath("//*[@id='trunkTBL']/div/div/div/div/table[1]/tbody/tr/td/a")).click();
	testFuncs.myWait(10000);
	if (testFuncs.findFilesByGivenPrefix(testVars.getDownloadsPath(), exportFilesPrefix)) {
	} else {
		
		testFuncs.myFail("File was not exported successfully !!");
	}
	String exportFilesTxt = testFuncs.readFile(testVars.getDownloadsPath() + "\\" + exportFilesPrefix);
	testFuncs.myAssertTrue("The header Device was not found in the export-data file !! \n" + exportFilesTxt, exportFilesTxt.contains("Device"));
	testFuncs.myAssertTrue("The header Status was not found in the export-data file !! \n" + exportFilesTxt, exportFilesTxt.contains("Status"));
	testFuncs.myAssertTrue("The header Status was not found in the export-data file !! \n" + exportFilesTxt, exportFilesTxt.contains("Status"));
	String username;
	for (int i = 1; i < (usersNumberInt + 1); i++) {
		
		username = srcUserName + "_" + String.valueOf(i);
		testFuncs.myAssertTrue("The user " + username + " was not found in the export-data file !! \n" + exportFilesTxt, exportFilesTxt.contains(username));
	}
	testFuncs.deleteFilesByPrefix(testVars.getDownloadsPath(), exportFilesPrefix);
  }
  
  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
    	testFuncs.myFail(verificationErrorString);
    }
  }
}
