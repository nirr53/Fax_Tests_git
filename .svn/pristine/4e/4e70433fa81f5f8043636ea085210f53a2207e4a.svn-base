package EMS_Tests;

import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;import EMS_Tests.enumsClass.browserTypes;

/**
* ----------------
* This test tests the invalid-login mechanism
* ----------------
* Tests:
*    1. Try to login with a  valid   username and an invalid password.
*    2. Try to login with an invalid username and a  valid password.
*    3. Try to login with an invalid username and an invalid password.
*    
* Results:
*    1-3. All the invalid login attempts should testFuncs.myFail.
*    
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test2__invalid_login {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private browserTypes  usedBrowser;
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test2__invalid_login(browserTypes browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  //Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass 
  public static void setting_SystemProperties() {
	  
      System.out.println("System Properties seting Key value.");
  }
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Invalid_login() throws Exception {
	
	Log.startTestCase(this.getClass().getName());
	  
    // Step 2.1 - invalid login - valid username + invalid password
	testFuncs.myDebugPrinting("Step 2.1 - invalid login - valid username + invalid password");
	invalidLogin(driver, testVars.getSysMainStr(), 0, this.usedBrowser);
	
    // Step 2.2 - invalid login - invalid username + valid password
	testFuncs.myDebugPrinting("Step 2.2 - invalid login - invalid username + valid password");
	invalidLogin(driver, testVars.getSysMainStr(), 1, this.usedBrowser);
	
    // Step 2.3 - invalid login - invalid username + invalid password
	testFuncs.myDebugPrinting("Step 2.3 - invalid login - invalid username + invalid password");
	invalidLogin(driver, testVars.getSysMainStr(), 2, this.usedBrowser);
  }
  
  /**
  *  Invalid login method
  *  @param driver  A given driver for make all tasks
  *  @param mainStr A given string for verify bad access
  *  @param i A integer to mark the tested test
  *  @param browsertype
  */
  private void invalidLogin(WebDriver driver, String mainStr, int i, String brwType) {
        
      driver.get("https://" + testVars.getUrl());
      if (brwType.equals("IE") && i == 0) {
    	  driver.findElement(By.xpath("//a[@id='overridelink']")).click();
    	  testFuncs.myWait(3000);
    	  
      }
      
      assertTrue("EMS was not reached !! (" + driver.getTitle() + ")", driver.getTitle().equals(testVars.getMainPageStr()));
      driver.findElement(By.name("auth_admin_user_")).clear();
      driver.findElement(By.name("auth_admin_password_")).clear();	      
      if (i == 0) {
    	  
	      driver.findElement(By.name("auth_admin_user_")).sendKeys(testVars.getSysUsername().substring(1));
	      driver.findElement(By.name("auth_admin_password_")).sendKeys(testVars.getSysPassword());     
      } else if (i == 1) {
    	  
	      driver.findElement(By.name("auth_admin_user_")).sendKeys(testVars.getSysUsername());
	      driver.findElement(By.name("auth_admin_password_")).sendKeys(testVars.getSysPassword().substring(1));   
      } else if (i == 2) {
      
	      driver.findElement(By.name("auth_admin_user_")).sendKeys(testVars.getSysUsername().substring(1));
	      driver.findElement(By.name("auth_admin_password_")).sendKeys(testVars.getSysPassword().substring(1));
      }
      driver.findElement(By.xpath("//*[@id='Submit1']")).click();
	  testFuncs.myWait(4000);  
      String title = driver.getTitle();
      testFuncs.myDebugPrinting("title - " + title, enumsClass.logModes.MINOR);
      if (title.contains(mainStr)) {
    	  testFuncs.myFail("Login succeded !!");
    	  
      }
  }

  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
      testFuncs.myFail(verificationErrorString);
    }
  }
}