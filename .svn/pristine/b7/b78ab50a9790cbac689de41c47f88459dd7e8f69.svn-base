package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;import EMS_Tests.enumsClass.browserTypes;

/**
* ----------------
* This test tests the phone configuration files menu
* ----------------
* Tests:
* 	 - Enter the Phone configuration files menu.
* 	 1. Upload a phone configuration.
* 	 2. Download a phone configuration.
* 	 3. Delete a phone configuration.
* 
* Results:
* 	 1. Phone configuration should be uploaded successfully.
*	 2. Phone configuration should be downloaded successfully.
* 	 3. Phone configuration should be deleted successfully.
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test30__phone_configuration_files {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private browserTypes  usedBrowser;
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test30__phone_configuration_files(browserTypes browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass
  public static void setting_SystemProperties() {
	  
	  System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Phone_configuration_files_menu() throws Exception {
	  
	Log.startTestCase(this.getClass().getName());
	 
    // Enter the Phone configuration files menu
	testFuncs.myDebugPrinting("Enter the Phone configuration files menu");
	testFuncs.login(driver, testVars.getSysUsername(), testVars.getSysPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
    driver.switchTo().defaultContent();
	testFuncs.enterMenu(driver, "Phone_configuration_files", "Manage Configuration Files");
  	testFuncs.myWait(1000);
    driver.switchTo().frame(1);
	
	// Step 1 - Upload a phone configuration file
  	testFuncs.myDebugPrinting("Step 1 - Upload a phone configuration file");
	uploadConfigurationFile(driver,  testVars.getSrcFilesPath() + "\\" + testVars.getImportFile("30"), testVars.getImportFile("30"));
	
	// Step 2 - Download a phone configuration file
  	//testFuncs.myDebugPrinting("Step 2 - Download a phone configuration file");
	// TODO find a solution for download problem
  	//testFuncs.downloadConfigurationFile(driver,  testVars.getImportFile("30"));
		
	// Step 3 - Delete a phone configuration file
  	testFuncs.myDebugPrinting("Step 3 - Delete a phone configuration file");
	deleteConfigurationFile(driver,  testVars.getImportFile("30"));
  }
  
  /**
  *  Delete a configuration file
  *  @param driver   - A given driver
  *  @param fileName - A name of the deleted file
  */
  private void deleteConfigurationFile(WebDriver driver, String fileName) {
	  
	  driver.findElement(By.xpath("//*[@id='trunkTBL']/div/form/p[1]/input")).clear();
	  driver.findElement(By.xpath("//*[@id='trunkTBL']/div/form/p[1]/input")).sendKeys(fileName);
	  driver.findElement(By.xpath("//*[@id='selall']")).click();
	  testFuncs.myWait(2000);
	  driver.findElement(By.xpath("//*[@id='trunkTBL']/div/form/p[2]/input[4]")).click();
	  testFuncs.myWait(2000);
	  Alert alert = driver.switchTo().alert();
	  if (alert.getText().contains("Are you sure want to delete the selected files?")){}
	  else {
		  
		  testFuncs.myFail("Alert message was not detected !! (" + alert.getText() + ")");
	  }
	  alert.accept(); 
	  testFuncs.myWait(2000);
	  testFuncs.verifyStrByXpath(driver, "//*[@id='promt_div_id']", "File Deleted Successfully: \"" + fileName + "\"");
	  driver.findElement(By.xpath("//*[@id='jqi_state0_buttonOk']")).click();
	  testFuncs.myWait(1000);
	  
	  // Verify delete
	  testFuncs.myDebugPrinting("verify delete", enumsClass.logModes.MINOR);
	  driver.findElement(By.xpath("//*[@id='trunkTBL']/div/form/p[1]/input")).clear();
	  driver.findElement(By.xpath("//*[@id='trunkTBL']/div/form/p[1]/input")).sendKeys(fileName);
	  testFuncs.myWait(3000);
	  String bodyText = driver.findElement(By.tagName("body")).getText();
	  if (bodyText.contains(fileName)) {
		  
		  testFuncs.myFail("Delete did not succeeded !!");
	  }
  }
  
  /**
  *  Upload a configuration file
  *  @param driver   - A given driver
  *  @param filePath - A given path to configuration file we want to upload
  *  @param fileName - A name of the uploaded file
  */
  private void uploadConfigurationFile(WebDriver driver, String filePath, String fileName) {
	  
	  driver.findElement(By.xpath("//*[@id='myfile']")).sendKeys(filePath);
	  testFuncs.myWait(1000);
	  driver.findElement(By.xpath("//*[@id='form_upload']/p/input[4]")).click();
	  testFuncs.myWait(2000);
	  testFuncs.verifyStrByXpath(driver, "//*[@id='promt_div_id']", "\"" + fileName + "\" File Successfully Uploaded.");
	  driver.findElement(By.xpath("//*[@id='jqi_state0_buttonOk']")).click();
	  testFuncs.myWait(1000);
		
	  // Verify upload
	  driver.findElement(By.xpath("//*[@id='trunkTBL']/div/form/p[1]/input")).clear();
	  driver.findElement(By.xpath("//*[@id='trunkTBL']/div/form/p[1]/input")).sendKeys(fileName);
	  testFuncs.myWait(2000);
	  testFuncs.verifyStrByXpath(driver, "//*[@id='filetable']/tbody/tr[2]/td[2]/span/a[2]", fileName);
  }
  
  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
    	testFuncs.myFail(verificationErrorString);
    }
  }
}
