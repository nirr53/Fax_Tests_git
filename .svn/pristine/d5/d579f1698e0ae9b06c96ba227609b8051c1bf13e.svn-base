package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import static org.junit.Assert.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;

/**
* This test tests the create-user options (manually and via POST query)
* 1. Add new user manually
* 2. Add a registered user
* 3. Add an unregistered user
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test5__add_user_tests {
	
  public static int     random = 0;
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test5__add_user_tests(String browser) {
	  System.out.println("Browser - "  + browser);
  }
  
  //Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameterized.Parameters
   public static Collection data() {
    //return Arrays.asList(new Object[][]{{"Chrome"},{"Firefox"},{"IE"}});
    return Arrays.asList(new Object[][]{{"Chrome"}});

   }
  
  @BeforeClass public static void setting_SystemProperties(){
      System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getfirefoxDrvPath());
	System.out.println("Enter setUp(); random - " + random);
	if 		  (random == GlobalVars.CHROME) {
    	driver    = new ChromeDriver();
        
    } else if (random == GlobalVars.FIREFOX) {
    	driver 	  = new FirefoxDriver();
    	
    } else if (random == GlobalVars.IE) {
    	driver 	  = new InternetExplorerDriver();

    }  else {
    	fail ("random is invalid - " + random);
    	
    }
    driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
    testFuncs = new GlobalFuncs(); 
  }

  @Test
  public void testLoginStandAlone1() throws Exception {
	 
	String Id = testFuncs.getId();
	System.out.println("Id is: " + Id);
	testFuncs.login(driver, testVars.getSysMainStr(), "http://");

    // Step 5.1 - Create user manually
	System.out.println("Step 5.1 - Create user manually");
	testFuncs.addUser(driver, "Manual user" + Id, "1q2w3e$r", "Manual user display name" + Id, "TelAviv");
    driver.switchTo().defaultContent();
    driver.findElement(By.xpath("//*[@id='home']")).click();
	testFuncs.myWait(2000);

    // Step 5.2 - Create a registered user using POST method
	System.out.println("Step 5.2 - Create a registered user using POST method");
	String path = System.getProperty("user.dir") + "\\" + testVars.getCrUserBatName();	
    String[] cmd = {path, testVars.getIp(), testVars.getPort()  , "1",
    		        "postUserPrefix1" + Id , testVars.getDomain(), "registered",
    		        "430HD", "TelAviv", "myLocation" };
    Process p = Runtime.getRuntime().exec(cmd);
    // TODO add mechanism to end wait only when create is ended
    p.waitFor();
	testFuncs.myWait(20000);
    testFuncs.verifyPostUserCreate(driver, "postUserPrefix1" + Id, "postUserPrefix1" + Id, true);
    driver.switchTo().defaultContent();
    driver.findElement(By.xpath("//*[@id='home']")).click();
	testFuncs.myWait(2000);

    // Step 5.3 - Create an unregistered user using POST method
	System.out.println("Step 5.3 - Create an unregistered user using POST method");
    String[] cmd2 = {path, testVars.getIp(), testVars.getPort()  , "1",
    		        "postUserPrefix2" + Id , testVars.getDomain(), "unregistered",
    		        "430HD", "TelAviv", "myLocation" };
    Process p2 = Runtime.getRuntime().exec(cmd2);
    // TODO add mechanism to end wait only when create is ended
    p2.waitFor();
	testFuncs.myWait(20000);
    testFuncs.verifyPostUserCreate(driver, "postUserPrefix2" + Id, "postUserPrefix2" + Id, false);
	
    random += 1;
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }
}
