package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import org.openqa.selenium.*;

/**
* ----------------
* This test tests the Import / Export mechanism
* ----------------
* Tests:
* 	 - Login and enter the Import users menu.
* 	 1. Import users.
* 	 2. Import users + devices.
* 	 3. Import existing users.
* 	 4. Delete the imported users.
* 
* Results:
* 	 1.2 Import should end successfully.
* 	 3.  The system should inform the user about the exist users.
* 	 4.  Delete should be ended successfully.
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test11__import_export_tests {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private String        usedBrowser = "";
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test11__import_export_tests(String browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass
  public static void setting_SystemProperties() {
	  
	  System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Import_export() throws Exception {
	 
	String usrNamePref	  = "username99";
	String path        	  = "";
	int idxImpUsrs  	  = 1;
	int idxImpUsrsDvcs    = 4; 
	Log.startTestCase(this.getClass().getName());
	
    // Step 1 - Enter the Import users menu and import users
	testFuncs.myDebugPrinting("Step 1 - Enter the Import users menu and import users");
	testFuncs.login(driver, testVars.getSysUsername(), testVars.getSysPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
	testFuncs.enterMenu(driver, "Import_export", "Import Users and Devices information");
	driver.switchTo().frame(1);
	path  = testVars.getSrcFilesPath() + "\\" + testVars.getImportFile("11.1");
	int usersNumber1 = testFuncs.readFileLines(path, true);
	testFuncs.uploadFile(driver, path, usrNamePref, idxImpUsrs, usersNumber1, "Added");
    driver.switchTo().frame(1);	
    driver.findElement(By.xpath("//*[@id='trunkTBL']/div/div/div/div/div[1]/table/tbody/tr/td[11]/a")).click();
  	testFuncs.myWait(1000);
    
    // Step 2 - Enter the Import users menu and import users+devices
  	testFuncs.myDebugPrinting("Step 2 - Enter the Import users menu and import users+devices");
	path  = testVars.getSrcFilesPath() + "\\" + testVars.getImportFile("11.2");
	int usersNumber2 = testFuncs.readFileLines(path, true);
	testFuncs.uploadFile(driver, path, usrNamePref, idxImpUsrsDvcs, usersNumber2, "Added");
    driver.switchTo().frame(1);	
    driver.findElement(By.xpath("//*[@id='trunkTBL']/div/div/div/div/div[1]/table/tbody/tr/td[11]/a")).click();
  	testFuncs.myWait(1000);
	
    // Step 3 - Enter the Import users menu and import existing users
  	testFuncs.myDebugPrinting("Step 3 - Enter the Import users menu and import existing users");
	testFuncs.uploadFile(driver, path, usrNamePref, idxImpUsrsDvcs, usersNumber2, "Already exists");
    driver.switchTo().frame(1);	
    driver.findElement(By.xpath("//*[@id='trunkTBL']/div/div/div/div/div[1]/table/tbody/tr/td[11]/a")).click();
  	testFuncs.myWait(1000);
  	
    // Step 4 - Delete users
  	testFuncs.myDebugPrinting("Step 4 - Delete users");
 	driver.switchTo().defaultContent();
    driver.findElement(By.xpath("//*[@id='tree_tab']/tbody/tr[3]/td/div/ul/li[3]/ul/li[2]/a")).click();
  	testFuncs.myWait(1000);
    driver.switchTo().frame(1);	
    testFuncs.verifyStrByXpath(driver, "//*[@id='title']", "Manage Multiple Users");
    String usersTotalNumberString = String.valueOf(usersNumber1 + usersNumber2);
    testFuncs.selectMultipleUsers(driver, usrNamePref, usersTotalNumberString);
    Map<String, String> map = new HashMap<String, String>();
    map.put("usersPrefix",  usrNamePref);
    map.put("usersNumber",  usersTotalNumberString); 
    map.put("startIdx"   ,  String.valueOf(idxImpUsrs));
    map.put("srcUsername",  "Finished");
    map.put("action"	 ,  "Delete Users");
    testFuncs.setMultipleUsersAction(driver, map);
  }
  
  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
    	testFuncs.myFail(verificationErrorString);
    }
  }
}
