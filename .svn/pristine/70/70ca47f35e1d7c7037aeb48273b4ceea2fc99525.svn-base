package EMS_Tests;

import java.io.File;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;

/**
* ----------------
* This test tests the alarms page
* ----------------
* Tests:
* 	 - Enter the alarms page.
* 	 1. Check its appearance and menus.
* 	 2. Check the Reload and export buttons.
* 
* Results:
* 	 1. All headers should appear.
* 	 2. Reload and export mechanisms should work successfully.
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test9__alarms_page_tests {
	
  private String        usedBrowser = "";
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test9__alarms_page_tests(String browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass 
  public static void setting_SystemProperties() {
	  
      System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Alarms() throws Exception {
	 
	Log.startTestCase(this.getClass().getName());
	testFuncs.login(driver, testVars.getSysUsername(), testVars.getSysPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);

    // Step 1 - Enter the Alarms menu
	testFuncs.myDebugPrinting("Step 1 - Enter the Alarms menu");
	testFuncs.enterMenu(driver, "Alarms", "Alarms");
	driver.switchTo().frame(1);

	// Step 2 - Test the Export & Reload buttons
	if (!this.usedBrowser.equals(testVars.IE)) {
		
		testFuncs.myDebugPrinting("Step 2 - Test the Export & Reload buttons");
	    File f = new File(testVars.getDownloadsPath() + "\\" + testVars.getAlarmsExport());
	    f.delete();
	    testFuncs.myWait(1000);
	    driver.findElement(By.xpath("//*[@id='trunkTBL']/div/div[1]/h3/span/a[1]")).click();
	    testFuncs.myWait(2000);
	    String title = driver.findElement(By.xpath("//*[@id='jqistate_state0']/div[1]")).getText();
	    testFuncs.myAssertTrue("Title was not found (" + title + ")", title.contains("Export to CSV"));
	    testFuncs.myWait(1000);
	    driver.findElement(By.xpath("//*[@id='update']")).click();
	    driver.findElement(By.xpath("//*[@id='jqi_state0_buttonExport']")).click();
	    testFuncs.myWait(5000);
	    File getLatestFile = testFuncs.getLatestFilefromDir(testVars.getDownloadsPath());
	    String fileName = getLatestFile.getName();
	    testFuncs.myDebugPrinting("fileName - " + fileName, testVars.logerVars.MINOR);
	    testFuncs.myAssertTrue("Downloaded file name is not matching with expected file name", fileName.equals(testVars.getAlarmsExport()));
	    f.delete();
	}
  }

  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
      testFuncs.myFail(verificationErrorString);
    }
  }
}
