package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;import EMS_Tests.enumsClass.browserTypes;
import org.openqa.selenium.*;import EMS_Tests.enumsClass.browserTypes;

/**
* ----------------
* This test tests the multi device actions via an Operation user
* ----------------
* Tests:
* 	 - Login via an Operation user and enter Manage multiple devices changes menu.
*    1.   Verify that Delete-devices button is active.
*    2.   Verify that Change-phone-type button is active.
*    3.   Verify that Change-language button is active.
* 	 4.   Verify that Restart-devices button is active.
* 	 5.   Verify that Generate-configuration-users button is active.
* 	 6.   Verify that Update-configuration-users button is active.
*    7.   Verify that Send-message button is active.
*    8.   Verify that Change-firmware button is active.
*    9.   Verify that Change-VLAN-mode button is active.
* 
* Results:
*	 1-9.  In all actions, in all modes, the selected button should be active.
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test71__Operation_multi_devices_actions {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private browserTypes  usedBrowser;
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test71__Operation_multi_devices_actions(browserTypes browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass
  public static void setting_SystemProperties() {
	  
	  System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Operation_multi_devices_actions() throws Exception {
	  
	Log.startTestCase(this.getClass().getName());
	 
    // Login via a Operation user and enter Multi-device-changes menu
	testFuncs.myDebugPrinting("Login via a Monitoring user and enter Multi-device-changes menu");
	testFuncs.login(driver, testVars.getOpetUsername(), testVars.getOperPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
    driver.switchTo().defaultContent();
	testFuncs.enterMenu(driver, "Manage_Multiple_Devices", "Manage Multiple Devices");
    driver.switchTo().frame(1);	
    
    // Step 1 - Verify that Delete-devices button is active.
  	testFuncs.myDebugPrinting("Step 1 - Verify that Delete-devices button is active.");
    driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Delete Devices");
    testFuncs.myWait(2000);
    String delDevButton = driver.findElement(By.xpath("//*[@id='deleteDevicesTR']/td/table/tbody/tr[2]/td/a")).getAttribute("class");
    testFuncs.myAssertTrue("The Delete-devices button is not active !! \n" + delDevButton, !delDevButton.contains("not-active"));
    
    // Step 2 - Verify that Change-IP-phone-type button is active.
  	testFuncs.myDebugPrinting("Step 2 - Verify that Change-IP-phone-type button is active.");
    driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Change IP Phone Type");
    testFuncs.myWait(2000);
	Select phoneTypes = new Select(driver.findElement(By.xpath("//*[@id='ipptype']")));
	int size = phoneTypes.getOptions().size();
	for (int i = 0; i < size; ++i) {
		
		phoneTypes.selectByIndex(i);
	    testFuncs.myWait(50);
	    String chPhTypeButton = driver.findElement(By.xpath("//*[@id='changeTypeTR']/td/table/tbody/tr[2]/td/table/tbody/tr/td[4]/a")).getAttribute("class");
	    testFuncs.myAssertTrue("The Change-phone-type button is not active for model <" + phoneTypes.getFirstSelectedOption().getText() + ">\n" + chPhTypeButton, !chPhTypeButton.contains("not-active"));
	}
	
	// Step 3 - Verify that Change-language button is active.
	testFuncs.myDebugPrinting("Step 3 - Verify that Change-language button is active.");
	driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Change Language");
	testFuncs.myWait(2000);
	Select devLangs = new Select(driver.findElement(By.xpath("//*[@id='deviceLanguage']")));
	int size2 = devLangs.getOptions().size();
	for (int i = 0; i < size2; ++i) {
		
		devLangs.selectByIndex(i);
		testFuncs.myWait(50);
		String chLangButton = driver.findElement(By.xpath("//*[@id='changeLanguageTR']/td/table/tbody/tr[2]/td/table/tbody/tr/td[4]/a")).getAttribute("class");
		testFuncs.myAssertTrue("The Change-language button is not active for language <" + devLangs.getFirstSelectedOption().getText() + ">\n" + chLangButton, !chLangButton.contains("not-active"));
	}
	
    // Step 4 - Verify that Restart-devices button is active.
   	testFuncs.myDebugPrinting("Step 4 - Verify that Restart-devices button is active.");
   	driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Restart Devices");
   	testFuncs.myWait(2000);
   	String resModes[] = {"Graceful", "Force", "Scheduled"};
   	String resUsersButton;
   	for (String resMode : resModes) {
   		
   	   	driver.findElement(By.xpath("//*[@id='resetIpPhonesTR']/td/table/tbody/tr[4]/td/select")).sendKeys(resMode);
   	   	testFuncs.myWait(50);
   	   	resUsersButton = driver.findElement(By.xpath("//*[@id='resetIpPhonesTR']/td/table/tbody/tr[2]/td/a")).getAttribute("class");
   	   	testFuncs.myAssertTrue("The Restart-devices button is not active in " + resMode + " mode !!\n" + resUsersButton, !resUsersButton.contains("not-active"));	
   	}
   	
    // Step 5 - Verify that Generate-configuration-users button is active.
  	testFuncs.myDebugPrinting("Step 5 - Verify that Generate-configuration-users button is active.");
    driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Generate IP Phones Configuration Files");
    testFuncs.myWait(2000);
    String genConfButton = driver.findElement(By.xpath("//*[@id='setIpPhonesTR']/td/table/tbody/tr[4]/td/a")).getAttribute("class");
    testFuncs.myAssertTrue("The Generate-configuration button is not active !!\n" + genConfButton, !genConfButton.contains("not-active"));    
    driver.findElement(By.xpath("//*[@id='setIpPhonesTR']/td/table/tbody/tr[2]/td/input")).click();
    testFuncs.myWait(2000);
    genConfButton = driver.findElement(By.xpath("//*[@id='setIpPhonesTR']/td/table/tbody/tr[4]/td/a")).getAttribute("class");
    testFuncs.myAssertTrue("The Generate-configuration button is not active !!\n" + genConfButton, !genConfButton.contains("not-active"));
    
    // Step 6 - Verify that Update-configuration-users button is active.
  	testFuncs.myDebugPrinting("Step 6 - Verify that Update-configuration-users button is active.");
    driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Update Configuration Files");
    testFuncs.myWait(2000);
    String upConfButton = driver.findElement(By.xpath("//*[@id='updateConfigFilesTR']/td/table/tbody/tr[2]/td/a")).getAttribute("class");
    testFuncs.myAssertTrue("The Update-configuration button is not active !!\n" + upConfButton, !upConfButton.contains("not-active"));
    
    // Step 7 - Verify that Send-message button is active.
  	testFuncs.myDebugPrinting("Step 7 - Verify that Send-message button is active.");
    driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Send Message");
    testFuncs.myWait(2000);
    String sndMsgButton = driver.findElement(By.xpath("//*[@id='sendMessageTR']/td/table/tbody/tr[2]/td/a")).getAttribute("class");
    testFuncs.myAssertTrue("The Send-message button is not active !!\n" + sndMsgButton, !sndMsgButton.contains("not-active"));    
    driver.findElement(By.xpath("//*[@id='sendMessageTR']/td/table/tbody/tr[4]/td/input")).sendKeys("message");
    testFuncs.myWait(2000);
    sndMsgButton = driver.findElement(By.xpath("//*[@id='sendMessageTR']/td/table/tbody/tr[2]/td/a")).getAttribute("class");
    testFuncs.myAssertTrue("The Send-message button is not active !!\n" + sndMsgButton, !sndMsgButton.contains("not-active"));  

	// Step 8 - Verify that Change-firmware button is active.
	testFuncs.myDebugPrinting("Step 8 - Verify that Change-firmware button is active.");
	driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Change Firmware");
	testFuncs.myWait(2000);
	Select firmwares = new Select(driver.findElement(By.xpath("//*[@id='firmware_id']")));
	int size3 = firmwares.getOptions().size();
	for (int i = 0; i < size3; ++i) {
		
		firmwares.selectByIndex(i);
		testFuncs.myWait(50);
		String chFirmButton = driver.findElement(By.xpath("//*[@id='updateFirmwareTR']/td/table/tbody/tr[2]/td/table/tbody/tr[1]/td[4]/a")).getAttribute("class");
		testFuncs.myAssertTrue("The Change-firmware button is not active for firmware <" + firmwares.getFirstSelectedOption().getText() + ">\n" + chFirmButton, !chFirmButton.contains("not-active"));
	}
	
	// Step 9 - Verify that Change-VLAN button is active.
	testFuncs.myDebugPrinting("Step 9 - Verify that Change-VLAN button is active.");
	driver.findElement(By.xpath("//*[@id='action']")).sendKeys("Change VLAN Discovery Mode");
	testFuncs.myWait(2000);
	Select vlanModes = new Select(driver.findElement(By.xpath("//*[@id='changeVlanTR']/td/table/tbody/tr[2]/td/table/tbody/tr[1]/td[1]/select")));
	int size4 = vlanModes.getOptions().size();
	for (int i = 0; i < size4; ++i) {
		
		vlanModes.selectByIndex(i);
		testFuncs.myWait(50);
		String chVlanButton = driver.findElement(By.xpath("//*[@id='changeVlanTR']/td/table/tbody/tr[2]/td/table/tbody/tr[1]/td[4]/a")).getAttribute("class");
		testFuncs.myAssertTrue("The Change-VLAN button is not active for vlan <" + vlanModes.getFirstSelectedOption().getText() + ">\n" + chVlanButton, !chVlanButton.contains("not-active"));
	}   
  }
  
  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
    	testFuncs.myFail(verificationErrorString);
    }
  }
}
