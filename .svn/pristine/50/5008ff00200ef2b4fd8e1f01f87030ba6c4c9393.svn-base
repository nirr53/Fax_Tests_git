package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;import EMS_Tests.enumsClass.browserTypes;

/**
* ----------------
* This test verify that the System-Settings menu is hidden when you login via Monitoring or Operation users.
* ----------------
* Tests:
* 	 1 Login with a  Monitoring user and check the System-Settings menu is not displayed.
* 	 2 Login with an Operation user and check the System-Settings menu is not displayed.
* 
* Results:
* 	 1. Via a Monitoring or Operation user the System-Settings menu is not displayed.
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test42__Monitoring_Operation_System_settings {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private browserTypes  usedBrowser;
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test42__Monitoring_Operation_System_settings(browserTypes browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  //Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass 
  public static void setting_SystemProperties() {
	  
      System.out.println("System Properties seting Key value.");
  }
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Monitoring_Operation_System_Settings_menu() throws Exception {
	
	  String bodyText;
	  String pConfMenuName = "System Settings";
	  Log.startTestCase(this.getClass().getName());
	  
	  // Step 1 - Login with a Monitoring user and check the System Settings menu is not displayed
	  testFuncs.myDebugPrinting("Step 1 - Login with a Monitoring user and check the System Settings menu is not displayed");
	  testFuncs.login(driver, testVars.getMonitUsername(), testVars.getMonitPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
      driver.findElement(By.xpath("//*[@id='tree_tab']/tbody/tr[3]/td/div/ul/li[4]/a")).click();
	  testFuncs.myWait(2000);
	  driver.switchTo().frame(1);
	  bodyText = driver.findElement(By.tagName("body")).getText();
	  testFuncs.myAssertFalse("System Settings Configuration Files exist !!", bodyText.contains(pConfMenuName));
	  driver.switchTo().defaultContent();
	  driver.findElement(By.xpath("//*[@id='header1']/tbody/tr/td[2]/a[3]")).click();
	  testFuncs.myWait(2000);
	  testFuncs.myAssertTrue("Log off testFuncs.myFailes !! (" + driver.getTitle() + ")", driver.getTitle().equals(testVars.getMainPageStr()));
	  
	  // Step 2 - Login with an Operation user and check the System Settings menu is not displayed
	  testFuncs.myDebugPrinting("Step 2 - Login with an Operation user and check the System Settings menu is not displayed");
	  testFuncs.login(driver, testVars.getOpetUsername(), testVars.getOperPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
	  driver.findElement(By.xpath("//*[@id='tree_tab']/tbody/tr[3]/td/div/ul/li[4]/a")).click();
	  testFuncs.myWait(2000);
	  driver.switchTo().frame(1);
	  bodyText = driver.findElement(By.tagName("body")).getText();
	  testFuncs.myAssertFalse("System Settings Configuration Files exist !!", bodyText.contains(pConfMenuName));	
  }

  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
      testFuncs.myFail(verificationErrorString);
    }
  }
}
