package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;

/**
* ----------------
* This test tests the default phone firmware files menu
* ----------------
* Tests:
* 	 - Login via an Operation user.
* 	 - Enter the Phone firmware files menu.
* 	 1. Try to delete a default firmware.
* 	 2. Try to edit a default firmware.
* 
* Results:
*    1-2. The actions should be forbidden. An appropriate error prompt should be displayed.
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test57__Operation_default_phone_firmware_files {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private String        usedBrowser = "";
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test57__Operation_default_phone_firmware_files(String browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass
  public static void setting_SystemProperties() {
	  
	  System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Operation_phone_firmware_files_actions() throws Exception {
	  
	Log.startTestCase(this.getClass().getName());
	 
    // Enter the Phone firmware files menu
	testFuncs.myDebugPrinting("Enter the Phone firmware files menu");
	testFuncs.login(driver, testVars.getOpetUsername(), testVars.getOperPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
    driver.switchTo().defaultContent();
	testFuncs.enterMenu(driver, "Operation_Phone_firmware_files", "Phone firmware files");
  	testFuncs.myWait(1000);
    driver.switchTo().frame(1);						
	
	// Step 1 - Try to delete a default firmware
  	testFuncs.myDebugPrinting("Step 1 - Try to delete a default firmware");
  	driver.findElement(By.cssSelector("a[title*='" + "Delete 440HD" + "']")).click();
  	testFuncs.myWait(2000);
  	driver.findElement(By.xpath("//*[@id='jqi_state0_buttonYes']")).click();
  	testFuncs.myWait(2000);
  	testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[1]/h3"     , "Unauthorized");
  	testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[2]/div/div", "You do not have permission to modify this item"); 
  	enterPhoneFirmwareFilesMenu(driver);

	// Step 2 - Try to edit a default firmware
  	testFuncs.myDebugPrinting("Step 2 - Try to edit a default firmware");
  	driver.findElement(By.cssSelector("a[title*='" + "default firmware" + "']")).click();
  	testFuncs.myWait(2000);
  	driver.findElement(By.xpath("//*[@id='submit_img']")).click();
  	testFuncs.myWait(2000);
  	testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[1]/h3"     , "Unauthorized");
  	testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[2]/div/div", "You do not have permission to modify this item"); 	
  }
  
  public void enterPhoneFirmwareFilesMenu(WebDriver driver) {
	  
	  // Return to Template placeholders menu
	  testFuncs.myDebugPrinting("Return to Phone Firmware Files menu", testVars.logerVars.MINOR);
	  driver.switchTo().defaultContent();
	  driver.findElement(By.xpath("//*[@id='tree_tab']/tbody/tr[3]/td/div/ul/li[4]/ul/li[6]/a")).click();
	  testFuncs.myWait(2000);
	  driver.switchTo().frame(1);
  }
  
  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
    	testFuncs.myFail(verificationErrorString);
    }
  }
}
