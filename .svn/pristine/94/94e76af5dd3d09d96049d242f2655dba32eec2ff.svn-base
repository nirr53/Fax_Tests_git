package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;import EMS_Tests.enumsClass.browserTypes;

/**
* ----------------
* This test tests an export of users when login via a Monitoring user.
*  ----------------
*  Tests:
* 	 - Login the EMS via a Monitoring user.
* 	 - Enter the Import users menu.
* 	 1. Export a CSV template containing users only, without devices.
* 	 2. Export a CSV template containing both users and devices.
* 	 3. Export a CSV file containing users and devices information already defined in the server.
* 
* Results:
*  	 1-2. Export should not be possible.
*  	 3. Export of the current users+ devices. should be possible.
*  
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test62__Monitoring_export_tests {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private browserTypes  usedBrowser;
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test62__Monitoring_export_tests(browserTypes browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass
  public static void setting_SystemProperties() {
	  
	  System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Monitoring_export_users() throws Exception {
	 
	String csvCurrUsersPref = "exportUsers";
	Log.startTestCase(this.getClass().getName());

	if (!this.usedBrowser.equals(testVars.IE)) {

	    // Step 1 - Try to export a CSV template containing users only
		testFuncs.myDebugPrinting("Step 1 - Try to export a CSV template containing users only");
		testFuncs.login(driver, testVars.getMonitUsername(), testVars.getMonitPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
		testFuncs.enterMenu(driver, "Import_export", "Import Users and Devices information");
	    driver.switchTo().frame(1);	
		driver.findElement(By.xpath("//*[@id='uploadForm']/table/tbody/tr[8]/td/p/b[1]/a")).click();
		testFuncs.myWait(2000);	
		testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[1]/h3"     , "Unauthorized");
		testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[2]/div/div", "You do not have permission to modify this item");
	    driver.switchTo().defaultContent();
		driver.findElement(By.xpath("//*[@id='tree_tab']/tbody/tr[3]/td/div/ul/li[3]/ul/li[4]/a")).click();
		testFuncs.myWait(2000);	
		
	    // Step 2 - Try to export a CSV template containing users and devices
		testFuncs.myDebugPrinting("Step 2 - Try to export a CSV template containing users and devices");
	    driver.switchTo().frame(1);	
		driver.findElement(By.xpath("//*[@id='uploadForm']/table/tbody/tr[8]/td/p/b[2]/a")).click();
		testFuncs.myWait(2000);
		testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[1]/h3"     , "Unauthorized");
		testFuncs.verifyStrByXpath(driver, "/html/body/div/div/div[2]/div/div", "You do not have permission to modify this item");
	    driver.switchTo().defaultContent();
		driver.findElement(By.xpath("//*[@id='tree_tab']/tbody/tr[3]/td/div/ul/li[3]/ul/li[4]/a")).click();
		testFuncs.myWait(2000);	
		
	    // Step 3 - Try to export a CSV file containing users and devices information already defined in the server
		testFuncs.myDebugPrinting("Step 3 - Try to export a CSV file containing users and devices information already defined in the server");
		testFuncs.deleteFilesByPrefix(testVars.getDownloadsPath(), csvCurrUsersPref);
		driver.switchTo().frame(1);
		driver.findElement(By.xpath("//*[@id='uploadForm']/table/tbody/tr[10]/td/a")).click();
		testFuncs.myWait(10000);
		if (testFuncs.findFilesByGivenPrefix(testVars.getDownloadsPath(), csvCurrUsersPref + ".csv")) {
		} else {
			
			testFuncs.myFail("File was not downloaded successfully !!");
		}
	    driver.switchTo().defaultContent();
		testFuncs.deleteFilesByPrefix(testVars.getDownloadsPath(), csvCurrUsersPref);
	}
  } 
  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
    	testFuncs.myFail(verificationErrorString);
    }
  }
}
