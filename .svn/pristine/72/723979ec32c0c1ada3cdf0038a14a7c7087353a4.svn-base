package EMS_Tests;

import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import org.openqa.selenium.*;

/**
* ----------------
* This test tests the Templates menu via a Monitoring user
* ----------------
* Tests:
* 	 - Login via a Monitoring user and enter the Templates menu.
* 	 1. Try to add a Template via Monitoring user.
* 	 2. Verify that you cannot edit an existing Template.
* 	 3. Verify that you cannot delete a Template.
* 
* Results:
* 	 1-3. All the template actions should be blocked via a Monitoring user. 
* 
* @author Nir Klieman
* @version 1.00
*/

@RunWith(Parameterized.class)
public class Test51__Monitoring_phone_configuration_files {
	
  private WebDriver 	driver;
  private StringBuffer  verificationErrors = new StringBuffer();
  private String        usedBrowser = "";
  GlobalVars 			testVars;
  GlobalFuncs			testFuncs;
  
  // Default constructor for print the name of the used browser 
  public Test51__Monitoring_phone_configuration_files(String browser) {
	  
	  System.out.println("Browser - "  + browser);
	  this.usedBrowser = browser;
  }
  
  // Define each browser as a parameter
  @SuppressWarnings("rawtypes")
  @Parameters(name="{0}")
  public static Collection data() {
	  
	GlobalVars testVars2  = new GlobalVars();
    return Arrays.asList(testVars2.getBrowsers());
  }
  
  @BeforeClass
  public static void setting_SystemProperties() {
	  
	  System.out.println("System Properties seting Key value.");
  }  
  
  @Before
  public void setUp() throws Exception {
	  	
	testVars  = new GlobalVars();
    testFuncs = new GlobalFuncs(); 
    System.setProperty("webdriver.chrome.driver", testVars.getchromeDrvPath());
	System.setProperty("webdriver.ie.driver"    , testVars.getIeDrvPath());
	testFuncs.myDebugPrinting("Enter setUp(); usedbrowser - " + this.usedBrowser);
	driver = testFuncs.defineUsedBrowser(this.usedBrowser);
    // driver.manage().window().maximize();
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void Monitoring_templates() throws Exception {
	  
	Log.startTestCase(this.getClass().getName());
	 
    // Login via a Monitoring user and enter the Templates menu
	testFuncs.myDebugPrinting("Login via a Monitoring user and enter the Templates menu");
	testFuncs.login(driver, testVars.getMonitUsername(), testVars.getMonitPassword(), testVars.getSysMainStr(), "https://", this.usedBrowser);
    driver.switchTo().defaultContent();    
	testFuncs.enterMenu(driver, "Monitoring_Templates", "IP Phones Configuration Templates");
	driver.switchTo().frame(1);
	 
	// Step 1 - Verify that you cannot add a new Template
	testFuncs.myDebugPrinting("Step 1 - Verify that you cannot add a new Template");
	String addTemplate = driver.findElement(By.xpath("//*[@id='tbTemps']/tbody/tr[1]/td/a")).getAttribute("class");
	testFuncs.myAssertTrue("Add Template button is not deactivated !! (" + addTemplate + ")", addTemplate.contains("not-active"));

	// Step 2 - Verify that you cannot edit a Template
  	testFuncs.myDebugPrinting("Step 2 - Verify that you cannot edit a Template");
	driver.findElement(By.xpath("//*[@id='tbTemps']/tbody/tr[3]/td/div/table/tbody/tr[1]/td[8]/a")).click();
	testFuncs.myWait(2000);
	String submit = driver.findElement(By.xpath("//*[@id='t1']/tbody/tr[3]/td/table/tbody/tr/td[3]/a")).getAttribute("class");
	testFuncs.myAssertTrue("Edit Template is not deactivated !! (" + submit + ")", submit.contains("not-active"));
	driver.findElement(By.xpath("//*[@id='back_img']")).click();
	testFuncs.myWait(2000);
		
	// Step 3 - Verify that you cannot delete a Template
	testFuncs.myDebugPrinting("Step 3 - Verify that you cannot delete a Template");
	String deleteTemplate = driver.findElement(By.xpath("//*[@id='tbTemps']/tbody/tr[3]/td/div/table/tbody/tr[1]/td[9]/a")).getAttribute("class");
	testFuncs.myAssertTrue("Delete Template is not deactivated !! (" + deleteTemplate + ")", deleteTemplate.contains("not-active"));
  }
  
  @After
  public void tearDown() throws Exception {
	  
    driver.quit();
    System.clearProperty("webdriver.chrome.driver");
	System.clearProperty("webdriver.ie.driver");
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
    	
    	testFuncs.myFail(verificationErrorString);
    }
  }
}
